worker_processes 1;
daemon off;

error_log stderr;
#error_log /home/vcap/app/nginx/logs/error.log;
events { worker_connections 1024; }

http {
  charset utf-8;
  log_format cloudfoundry '$http_x_forwarded_for - $http_referer - [$time_local] "$request" $status $body_bytes_sent';
  access_log /dev/stdout cloudfoundry;
  #access_log /home/vcap/app/nginx/logs/access.log cloudfoundry;
  default_type application/octet-stream;
  include mime.types;
  #include nginx/conf/includes/headers.conf;
  sendfile on;

  gzip on;
  gzip_disable "msie6";
  gzip_comp_level 6;
  gzip_min_length 1100;
  gzip_buffers 16 8k;
  gzip_proxied any;
  gunzip on;
  gzip_static always;
  gzip_types text/plain text/css text/js text/xml text/javascript application/javascript application/x-javascript application/json application/xml application/xml+rss;
  gzip_vary on;

  tcp_nopush on;
  keepalive_timeout 30;
  port_in_redirect off; # Ensure that redirects don't include the internal container PORT - 8080
  server_tokens off;

  server {
    listen {{port}};
    server_name localhost;

    root /home/vcap/app/ids-reimbursement-ui;
    add_header CUSTOM-NGINX-CONF true always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;
    add_header X-Frame-Options SAMEORIGIN always;

    set $updated_host $host;
    if ($http_x_forwarded_host != "") {
      set $updated_host $http_x_forwarded_host;
    }

    if ($http_x_forwarded_proto != "https") {
      return 301 https://$updated_host$request_uri;
    }

    location / {
      if (!-e $request_filename) {
        rewrite ^(.*)$ / break;
      }

      index index.html index.htm Default.htm;
    }

    location /env_config {
      default_type application/javascript;

      return 200 'window.config = { "CLIENT_ID": "{{env "CLIENT_ID"}}", "OKTA_DOMAIN": "{{env "OKTA_DOMAIN"}}", "API_ENDPOINT": "{{env "API_ENDPOINT"}}", "OAUTH_URL": "{{env "OAUTH_URL"}}" }';
    }

    location ~ /\. {
      deny all;
      return 404;
    }
  }
}

## Environment specific endpoint mapping
